void pass2()
{
	lineCount = 1;
	char str1[20],str2[20],str3[20];	
	int memAddr = 0x1000;
	int i=0,j,k,l;
	printf("\n\n\n");
	printf("\nLine\tLoc\tSource Statement\t\tObject code\n\n");

																	//print for START seperately
	printf("%d\t%x\tstart\n",lineCount++,memAddr);
	
	i=6;
	while(i<endIndex)
	{
		printf("%d\t",lineCount++);					//print line number
			
		j=k=l=0;
		memset(str1,0,strlen(str1));
		memset(str2,0,strlen(str2));
		memset(str3,0,strlen(str3));	
		str1[0] = str2[0] = str3[0] = '\0';	
		
		while(buff2[i] != ' ')
			str1[j++] = buff2[i++];	
		str1[j] = '\0';
		i++;

		while((buff2[i] != ' ') && (buff2[i] != '\n'))
			str2[k++] = buff2[i++];
		str2[k] = '\0';
		
		while(buff2[i] != '\n')
		{
			if(buff2[i] == ' ')
				i++;
			str3[l++] = buff2[i++];
		}
		str3[l] = '\0';
		i++;
	
		
		printf("%x\t",memAddr);						//print location

		if((strlen(str3)) && (!(strcmp(str2,"byte"))))		//if {(str3) and str2 is byte}
			memAddr++;
		else
			memAddr += 3;

															//printing the program statements

		printf("%s\t%s",str1,str2);
		if(strlen(str3))
			printf("\t%s\t\t",str3);					//*****remove \n in these 2 lines when the object code is also being printed	
		else printf("\t\t\t");

		ObjectCode(str1,str2,str3);		
		printf("%s\n",obj);						
	}
	
	printf("%d\t\tend\n",lineCount);
}	



int ObjectCode(char *str1, char *str2, char *str3)
{	
	int i=0,n=1;
	char temp[20];	
	memset(obj,0,strlen(obj));			//clear the obj array before use
	obj[0] = '\0';
	if(strlen(str3) > 0)				//for length 3 instructions
	{		
		if((!strcmp(str2,"byte")) || (!strcmp(str2,"word")))		//for var declarations
		{
			obj[0] = '0';
			obj[1] = '0';
			obj[2] = '0';
			if(strlen(str3) == 3)
			{
				obj[3] = str3[0];
				obj[4] = str3[1];
				obj[5] = str3[2];
			}
			else if(strlen(str3) == 2)					
			{
				obj[3] = '0';
				obj[4] = str3[0];
				obj[5] = str3[1];
			}
			else
			{
				obj[3]=obj[4] = '0';
				obj[5] = str3[0];
			}	
			obj[6] = '\0';
			return;
		} 
		
		else if(SearchLabel(str1))					//for label declarations
		{
			char tempstr[20];		//null string passed as the third arg to ObjectCode()
			tempstr[0] = '\0';			
			ObjectCode(str2,str3,tempstr);
			return;
		}
	}
	else if(strlen(str3) == 0)
	{		
		i = 0;							//for length 2 instructions
		n=1;
		if(str1[0] == 'j')				//for jump instructions
		{
			obj[0] = '3';
			if(!strcmp(str1,"j"))
			{	
				//printf("\t");		//to allign the output
				obj[1] = 'C';
			}
			else if(!strcmp(str1,"jeq"))
				obj[1] = '0';
			else if(!strcmp(str1,"jlt"))
				obj[1] = '8';
			else 
				obj[1] = '4';		
			
			SearchLabel(str2);
			int tempAddr;
			int t;		
			tempAddr = SearchLabelStruct->addr;
			t = tempAddr%0x10;
			if(t >= 0xa)
			{
				obj[5] =hex(t);
			}
			else
			{
				t = 0x30+t;
				obj[5] = t;
			}
			tempAddr/=0x10;
		
			t = tempAddr%0x10;
			t = 0x30 + t;
			tempAddr/=0x10;
			obj[4] = t;

			t = tempAddr%0x10;
			t = 0x30 + t;
			tempAddr/=0x10;
			obj[3] = t;

			t = tempAddr%0x10;
			t = 0x30 + t;
			tempAddr/=0x10;
			obj[2] = t;

			obj[6] = '\0';
		}		
		else if(str2[0] == '#')
		{
			//printf("\t");			
			while(n <= MAX_SIZE)
			{
				n++;	
				if((strcmp(str1,cmdTable[i].name)) == 0)			//Assigning first two characters in obj code
				{					
					obj[0] = cmdTable[i].opcode[0];

					if(cmdTable[i].opcode[1] == '0')
						obj[1] = '1';
					else if(cmdTable[i].opcode[1] == '4')
						obj[1] = '5';
					else if(cmdTable[i].opcode[1] == '8')
						obj[1] = '9';
					else if(cmdTable[i].opcode[1] == 'C')
						obj[1] = 'D';
				}
				i++;
			}
		
			obj[2] = '0';
			memset(temp,0,15);
			temp[0] = '\0';
			InsertWithinRange(str2,1,strlen(str2),temp);
			if(strlen(temp)==3)
			{
				obj[3] = temp[0];
				obj[4] = temp[1];
				obj[5] = temp[2];		
			}
			else if(strlen(temp)==2)
			{
				obj[3] = '0';
				obj[4] = temp[0];
				obj[5] = temp[1];
			}
			else
			{
				obj[3] = obj[4] = '0';
				obj[5] = temp[0];
			}
			obj[6] = '\0';
			return;	
		}

			
		else if(str2[0] == '@')
		{			
			while(n <= MAX_SIZE)
			{
				n++;
				if((strcmp(cmdTable[i].name,str1)) == 0)			
				{
					obj[0] = cmdTable[i].opcode[0];

					if(cmdTable[i].opcode[1] == '0')
						obj[1] = '2';
					else if(cmdTable[i].opcode[1] == '4')
						obj[1] = '6';
					else if(cmdTable[i].opcode[1] == '8')
						obj[1] = 'A';
					else if(cmdTable[i].opcode[1] == 'C')
						obj[1] = 'E';
				}
				i++;
			}
			
			obj[2] = '0';
			memset(temp,0,15);
			temp[0] = '\0';
			InsertWithinRange(str2,1,strlen(str2),temp);			
			SearchVar(temp);
			
			if(strlen(SearchVarStruct->val) == 3)
			{
				obj[3] = SearchVarStruct->val[0];
				obj[4] = SearchVarStruct->val[1];
				obj[5] = SearchVarStruct->val[2];
			}
			else if(strlen(SearchVarStruct->val) == 2)
			{
				obj[3] = '0';
				obj[4] = SearchVarStruct->val[0];
				obj[5] = SearchVarStruct->val[1];
			}
			else
			{
				obj[3] = obj[4] = '0';			
				obj[5] = SearchVarStruct->val[0];
			}	
			obj[6] = '\0';
			return;
		}


		else if(!strcmp(str1,"clear"))				//for clear instruction
		{	
			//printf("\t");
			obj[0] = 'B';
			obj[1] = '4';
			obj[2] = obj[3] = obj[4] = '0'; 
			obj[5] = RegVal(str2,0);
			obj[6] = '\0';
			return;
		}
		
		else if(str1[strlen(str1)-1] == 'r')			//for register related instructions
		{
			while(n <= MAX_SIZE)
			{
				n++;
				if((strcmp(cmdTable[i].name,str1)) == 0)			
				{
					obj[0] = cmdTable[i].opcode[0];			
					obj[1] = cmdTable[i].opcode[1];
					obj[2] = obj[3] = '0';
					obj[4] = RegVal(str2,0);
					obj[5] = RegVal(str2,2);
					obj[6] = '\0';
					return;				
				}
				i++;
			}
		}

		else if(SearchVar(str2))
		{
			while(n <= MAX_SIZE)
			{
				n++;
				if((strcmp(cmdTable[i].name,str1)) == 0)			
				{
					obj[0] = cmdTable[i].opcode[0];
					obj[1] = cmdTable[i].opcode[1];		

					SearchVar(str2);
					int tempAddr,t;		
					tempAddr = SearchVarStruct->addr;
					t = tempAddr%0x10;
					t = 0x30 + t;
					tempAddr/=0x10;
					obj[5] = t;
		
					t = tempAddr%0x10;
					t = 0x30 + t;
					tempAddr/=0x10;
					obj[4] = t;

					t = tempAddr%0x10;
					t = 0x30 + t;
					tempAddr/=0x10;
					obj[3] = t;

					t = tempAddr%0x10;
					t = 0x30 + t;
					tempAddr/=0x10;
					obj[2] = t;

					obj[6] = '\0';
					return;
				}
				i++;
			}
		}
	}
}





int RegVal(char *str, int p)
{
	if(str[p] == 'a')
		return 0x30;
	else if(str[p] == 'x')
		return 0x31;
	else if(str[p] == 'l')
		return 0x32;
	else if(str[p] == 'b')
		return 0x33;
	else if(str[p] == 's')
		return 0x34;
}



int hex(int val)
{
	if(val==0xa)
		return 'a';
	if(val==0xb)
		return 'b';
	if(val==0xc)
		return 'c';
	if(val==0xd)
		return 'd';
	if(val==0xe)
		return 'e';
	if(val==0xf)
		return 'f';
}
